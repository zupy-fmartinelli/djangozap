import logging

import phonenumbers
from celery import shared_task

from djangozap.users.models import User
from whatsapp.services import EvolutionAPI

logger = logging.getLogger(__name__)


def format_phone(phone):
    """Formata um n√∫mero de telefone para o padr√£o internacional."""
    try:
        parsed = phonenumbers.parse(str(phone), "BR")
        return phonenumbers.format_number(parsed, phonenumbers.PhoneNumberFormat.E164)
    except phonenumbers.NumberParseException:
        logger.exception("Erro ao formatar telefone %s", phone)
        return None


@shared_task
def update_whatsapp_info(user_id):
    """Tarefa para buscar e atualizar informa√ß√µes do WhatsApp."""
    try:
        user = User.objects.get(id=user_id)

        if not user.phone_number:
            return f"‚ö†Ô∏è Usu√°rio {user.email} sem n√∫mero de telefone."

        phone_number = format_phone(user.phone_number)
        if not phone_number:
            return f"‚ùå Telefone inv√°lido: {user.phone_number}"

        logger.info("üîç Buscando WhatsApp para %s (%s)", user.email, phone_number)

        response = EvolutionAPI.check_is_whatsapp(user, [phone_number])

        if response and isinstance(response, list) and response[0].get("exists"):
            user.whatsapp_jid = response[0]["jid"]
            user.whatsapp_name = response[0].get("name", "")

            profile_pic = EvolutionAPI.fetch_profile_pic(user, phone_number)
            user.whatsapp_profile_pic = profile_pic
            user.save()

            logger.info(
                "‚úÖ Atualizado %s | Nome: %s | Foto: %s",
                user.email,
                user.whatsapp_name,
                profile_pic,
            )
            return (
                f"‚úÖ Atualizado {user.email} | Nome: {user.whatsapp_name} | "
                f"Foto: {profile_pic}"
            )

        logger.warning("‚ùå %s n√£o tem WhatsApp v√°lido.", user.email)
        return f"‚ùå {user.email} n√£o tem WhatsApp v√°lido."  # noqa: TRY300

    except User.DoesNotExist:
        logger.exception("‚ùå Usu√°rio %s n√£o encontrado.", user_id)
        return f"‚ùå Usu√°rio {user_id} n√£o encontrado."

    except Exception:
        logger.exception(
            "‚ö†Ô∏è Erro inesperado ao atualizar WhatsApp do usu√°rio %s",
            user_id,
        )  # üî• `logger.exception` j√° inclui a exce√ß√£o automaticamente!
        return f"‚ö†Ô∏è Erro inesperado ao atualizar WhatsApp do usu√°rio {user_id}."
